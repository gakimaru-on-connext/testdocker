# -*- mode: ruby -*-
# vi: set ft=ruby :

def install_plugin(plugin)
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end

#install_plugin('vagrant-vbguest')
#install_plugin('vagrant-hostmanager')
#install_plugin('sahara')
#install_plugin('vagrant-vbox-snapshot')
install_plugin('vagrant-docker-compose')
install_plugin('vagrant-reload')

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "base"
  config.vm.box = "ailispaw/barge"
  #config.vm.box = "generic/rocky9"
  #config.vm.box = "generic/ubuntu2204"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  #config.vm.network "forwarded_port", guest: 80, host: 40080
  #config.vm.network "forwarded_port", guest: 443, host: 40443
  #config.vm.network "forwarded_port", guest: 6379, host: 46379
  #config.vm.network "forwarded_port", guest: 3306, host: 43306, host_ip: "127.0.0.1", auto_correct: true
  #config.vm.network "forwarded_port", guest: 2376, host: 42376, host_ip: "127.0.0.1", auto_correct: true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "192.168.56.20"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "./data", "/vagrant_data"
  config.vm.synced_folder "../docker", "/vagrant/docker", type: "rsync",
    rsync__args: ["-avh", "--delete", "--progress"],
    # barge 専用設定
    owner: "bargee",
    group: "bargees" 
  #config.vm.synced_folder "../setup/config", "/vagrant/setup/config", type: "rsync"
  #config.vm.synced_folder "./share", "/vagrant/share"
  #config.vm.synced_folder "/System/Volumes/Data" + File.expand_path("./share"), "/vagrant/share", type: "nfs", nfs_export: true, nfs_udp: false, nfs_version: 3

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider :virtualbox do |vb|
    vb.name = "testdocker"
    vb.gui = false
    vb.memory = "2048"
    vb.cpus = 4
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    #ボリューム変更方法
    # $ vagrant ssh
    # $ sudo pvdisplay  ... LVMの Phigical Volume 確認
    # $ sudo lvdisplay  ... LVMの Logical Volume 確認
    # $ sudo vgdisplay  ... LVMの Volume Group 確認
    # $ sudo lvextend -L100GB /dev/centos_centos7/root  ... LVMの Logical Volume サイズ拡張
    # $ sudo xfs_growfs /dev/mapper/centos_centos7-root  ... ファイルシステム（xfs）サイズ拡張
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # [初回起動時のみ実行] barge を使う場合：barge 向けの OS セットアップと docker-compose のインストール
  config.vm.provision :shell, privileged: true, inline: <<-SHELL
    # Docker を最新バージョンに更新
    /etc/init.d/docker restart latest
  SHELL
  # [初回起動時のみ実行] Vagrant に任せて と Docker をセットアップする場合（barge を使う場合は不要／Rocky Linux 9 では使用不可／Ubuntu 22.04 では使用可）
  #config.vm.provision :docker
  # [初回起動時のみ実行] シェルスクリプトで OS と Docker をセットアップする場合
  #setup_dir = "../setup"
  #config.vm.provision :shell, privileged: true, path: setup_dir + "/setup_os.sh", reboot: true
  #config.vm.provision :shell, privileged: true, path: setup_dir + "/setup_package_docker.sh"
  # [初回起動時のみ実行] Ansible で OS と Docker をセットアップする場合
  #config.vm.provision :ansible do |ansible|
  #  playbook_dir = "../ansible/playbook"
  #  ansible.config_file = playbook_dir + "/ansible.cfg"
  #  ansible.playbook = playbook_dir + "/site_all_setup.yml"
  #  ansible.inventory_path = playbook_dir + "/inventories/vagrant_hosts.yml"
  #  ansible.limit = 'all'
  #  #ansible.verbose = "vvv"
  #  #ansible.tags = "tag1,tag2,..."
  #  #ansible.tags = "os,docker"
  #end
  # [初回起動時のみ実行] セットアップ後に一度VMを再起動したい場合
  #config.vm.provision :reload
  # [毎回起動時に実行] Docker Compose 実行
  config.vm.provision :docker_compose, yml: "/vagrant/docker/docker-compose.yml", run: "always",
    executable_install_path: "/usr/bin/docker-compose",
    executable_symlink_path: "/opt/bin/docker-compose"
end
